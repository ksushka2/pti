import tkinter as tk
from tkinter import ttk, messagebox
import math


class HemmingCode:
    def __init__(self, root):
        self.root = root
        self.root.title("Построение кода Хемминга")

        # Устанавливаем ширину кнопок как атрибут класса
        self.button_width = 15

        # Разворачиваем окно на весь экран
        self.root.state('zoomed')

        # Стили
        style = ttk.Style()
        style.configure('Large.TLabel', font=('Arial', 12))
        style.configure('Large.TButton', font=('Arial', 12))
        style.configure('Large.TEntry', font=('Arial', 12))

        # Создаем основной контейнер
        main_container = ttk.Frame(root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Левая панель для ввода данных (увеличенная)
        left_panel = ttk.Frame(main_container, width=300)  # Увеличиваем с 250 до 300
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=10)
        left_panel.pack_propagate(False)  # Запрещаем изменение размера

        # Создаем контейнер для центральной и правой панелей
        right_container = ttk.Frame(main_container)
        right_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=2)

        # Настраиваем сетку для правого контейнера
        right_container.grid_rowconfigure(0, weight=1)  # Растягиваем по вертикали
        right_container.grid_columnconfigure(0, minsize=550)  # Минимальная ширина для расчетов
        right_container.grid_columnconfigure(1, minsize=650)  # Минимальная ширина для дерева

        # Центральная панель для результатов расчета
        center_panel = ttk.Frame(right_container, width=550)  # Фиксированная ширина для расчетов
        center_panel.grid(row=0, column=0, sticky='nsew', padx=2)
        center_panel.pack_propagate(False)  # Запрещаем изменение размера

        # Правая панель для дерева Хемминга
        self.tree_panel = ttk.Frame(right_container, width=650)  # Фиксированная ширина для дерева
        self.tree_panel.grid(row=0, column=1, sticky='nsew', padx=2)
        self.tree_panel.pack_propagate(False)  # Запрещаем изменение размера

        # Ввод количества букв (в левой панели)
        input_frame = ttk.Frame(left_panel)
        input_frame.pack(fill=tk.X, pady=10, anchor='w')  # Добавляем anchor='w' для выравнивания по левому краю

        ttk.Label(input_frame, text="Количество символов:", style='Large.TLabel').pack(pady=5, anchor='w')
        self.letters_count_entry = ttk.Entry(input_frame, font=('Arial', 12), width=8)
        self.letters_count_entry.pack(pady=5, anchor='w')

        # Создаем кнопки одинаковой ширины
        ttk.Button(input_frame, text="Создать таблицу",
                   command=self.create_probability_table,
                   style='Large.TButton',
                   width=self.button_width).pack(pady=5, anchor='w')

        ttk.Button(input_frame, text="Очистить холст",
                   command=self.clear_all,
                   style='Large.TButton',
                   width=self.button_width).pack(pady=5, anchor='w')

        # Фрейм для таблицы вероятностей (в левой панели)
        self.prob_frame = ttk.Frame(left_panel)
        self.prob_frame.pack(fill=tk.BOTH, expand=True, anchor='w')

        # Текстовое поле с прокруткой для вывода результатов (в центральной панели)
        ttk.Label(center_panel, text="Результаты расчета:", style='Large.TLabel').pack(pady=5, anchor='w')

        # Создаем фрейм для текста с прокруткой
        calc_frame = ttk.Frame(center_panel)
        calc_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Добавляем вертикальный и горизонтальный скроллбары
        calc_v_scroll = ttk.Scrollbar(calc_frame)
        calc_h_scroll = ttk.Scrollbar(calc_frame, orient='horizontal')
        self.result_text = tk.Text(calc_frame, font=('Arial', 12),
                                   wrap=tk.NONE,  # Отключаем перенос строк
                                   xscrollcommand=calc_h_scroll.set,
                                   yscrollcommand=calc_v_scroll.set)


        # Размещаем элементы
        calc_v_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        calc_h_scroll.pack(side=tk.BOTTOM, fill=tk.X)
        self.result_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Привязываем скроллбары
        calc_v_scroll.config(command=self.result_text.yview)
        calc_h_scroll.config(command=self.result_text.xview)

        # Добавляем фрейм для канваса и скроллбаров (в правой панели)
        ttk.Label(self.tree_panel, text="Дерево Хемминга", style='Large.TLabel').pack(pady=5, anchor='w')

        self.tree_frame = ttk.Frame(self.tree_panel)
        self.tree_frame.pack(fill=tk.BOTH, expand=True)

        # Создаем канвас со скроллбарами
        self.tree_canvas = tk.Canvas(self.tree_frame, bg='white')
        v_scrollbar = ttk.Scrollbar(self.tree_frame, orient="vertical",
                                    command=self.tree_canvas.yview)
        h_scrollbar = ttk.Scrollbar(self.tree_frame, orient="horizontal",
                                    command=self.tree_canvas.xview)

        # Конфигурируем скроллбары
        self.tree_canvas.configure(yscrollcommand=v_scrollbar.set,
                                   xscrollcommand=h_scrollbar.set)

        # Размещаем элементы
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    def clear_all(self):
        """Очищает все холсты и удаляет старую таблицу"""
        # Очищаем предыдущую таблицу
        for widget in self.prob_frame.winfo_children():
            widget.destroy()

        # Очищаем холст дерева
        self.tree_canvas.delete("all")

        # Очищаем текстовое поле результатов
        self.result_text.delete(1.0, tk.END)

    def create_probability_table(self):
        try:
            n = int(self.letters_count_entry.get())
            if n < 2:
                messagebox.showerror("Ошибка", "Количество символов должно быть не менее 2")
                return

            # Создаем заголовки таблицы с выравниванием по левому краю
            ttk.Label(self.prob_frame, text="Символ", style='Large.TLabel').grid(row=0, column=0, padx=5, pady=5,
                                                                                 sticky='w')
            ttk.Label(self.prob_frame, text="Вероятность", style='Large.TLabel').grid(row=0, column=1, padx=5, pady=5,
                                                                                      sticky='w')

            # Создаем поля ввода для вероятностей
            self.prob_entries = []
            for i in range(n):
                ttk.Label(self.prob_frame, text=f"z{i + 1}", style='Large.TLabel').grid(row=i + 1, column=0, padx=5,
                                                                                        pady=5, sticky='w')
                entry = ttk.Entry(self.prob_frame, font=('Arial', 12), width=10)
                entry.grid(row=i + 1, column=1, padx=5, pady=5, sticky='w')

                # Добавляем обработку Enter
                if i < n - 1:  # Если это не последнее поле
                    entry.bind('<Return>', lambda e, next_idx=i + 1: self.focus_next_entry(next_idx))
                else:  # Для последнего поля
                    entry.bind('<Return>', lambda e: self.calculate_hemming())

                self.prob_entries.append(entry)

            # Кнопка для расчета с той же шириной
            ttk.Button(self.prob_frame, text="Рассчитать",
                       command=self.calculate_hemming,
                       style='Large.TButton',
                       width=self.button_width).grid(row=n + 1, column=0, columnspan=2, pady=10, sticky='w')

        except ValueError:
            messagebox.showerror("Ошибка", "Введите корректное число символов")

    def focus_next_entry(self, next_idx):
        """Переводит фокус на следующее поле ввода"""
        self.prob_entries[next_idx].focus()


    def draw_tree(self, original_probs, all_states, merged_pairs):
        """Рисует дерево Хемминга вертикально"""
        self.tree_canvas.delete("all")

        # Размеры для дерева
        node_radius = 25  # Размер узла
        horizontal_spacing = 200  # Горизонтальное расстояние
        vertical_spacing = 100  # Вертикальное расстояние

        # Вычисляем необходимые размеры канваса
        total_width = max(2500, len(original_probs) * horizontal_spacing * 2)
        total_height = max(1200, 8 * vertical_spacing)

        self.tree_canvas.configure(scrollregion=(0, 0, total_width, total_height))

        # Начальные координаты корня
        root_x = total_width / 2
        root_y = vertical_spacing * 1.5

        def draw_node(x, y, value, step=None):
            """Рисует узел дерева"""
            self.tree_canvas.create_oval(x - node_radius, y - node_radius,
                                         x + node_radius, y + node_radius,
                                         fill='white')
            if step is not None:
                self.tree_canvas.create_text(x, y - node_radius - 10,
                                             text=f"Шаг {step}",
                                             font=('Arial', 10, 'bold'))
            self.tree_canvas.create_text(x, y, text=f"{value:.4f}")

        def draw_edge(x1, y1, x2, y2, label, step=None):
            """Рисует ребро между узлами"""
            self.tree_canvas.create_line(x1, y1, x2, y2)
            mid_x = (x1 + x2) / 2
            mid_y = (y1 + y2) / 2
            offset = 10
            if x2 < x1:  # левое ребро
                mid_x -= offset
            else:  # правое ребро
                mid_x += offset
            if step is not None:
                self.tree_canvas.create_text(mid_x, mid_y - 15,
                                             text=f"Шаг {step}",
                                             font=('Arial', 8))
            self.tree_canvas.create_text(mid_x, mid_y + 5, text=str(label))

        def build_tree_structure():
            """Строит структуру дерева на основе сохраненных состояний и пар объединения"""
            # Создаем словарь для хранения узлов
            nodes = {}
            total_steps = len(merged_pairs)
            
            # Создаем корневой узел (последнее состояние)
            root_value = all_states[-1][0]
            nodes[root_value] = {'value': root_value, 'left': None, 'right': None, 'step': total_steps}
            
            # Проходим по парам объединения в обратном порядке
            for step, (min1, min2, merged_sum) in enumerate(reversed(merged_pairs), 1):
                current_step = total_steps - step + 1
                node = nodes[merged_sum]
                
                # Создаем дочерние узлы
                nodes[min1] = {'value': min1, 'left': None, 'right': None, 'step': current_step}
                nodes[min2] = {'value': min2, 'left': None, 'right': None, 'step': current_step}
                
                # Больший узел идет влево (метка 1), меньший вправо (метка 0)
                if min1 > min2:
                    node['left'] = nodes[min1]
                    node['right'] = nodes[min2]
                else:
                    node['left'] = nodes[min2]
                    node['right'] = nodes[min1]
            
            return nodes[root_value]

        def draw_tree_recursive(node, x, y, width, parent_step=None):
            """Рекурсивно отрисовывает дерево"""
            if node is None:
                return

            current_step = node.get('step', None)
            draw_node(x, y, node['value'], current_step)

            if node['left'] is not None:
                next_y = y + vertical_spacing
                left_x = x - width / 2
                right_x = x + width / 2

                # Рисуем левое поддерево (метка 1)
                draw_edge(x, y + node_radius, left_x, next_y - node_radius, 1, current_step)
                draw_tree_recursive(node['left'], left_x, next_y, width / 2, current_step)

                # Рисуем правое поддерево (метка 0)
                draw_edge(x, y + node_radius, right_x, next_y - node_radius, 0, current_step)
                draw_tree_recursive(node['right'], right_x, next_y, width / 2, current_step)

        # Строим структуру дерева
        tree = build_tree_structure()

        # Отрисовываем дерево
        draw_tree_recursive(tree, root_x, root_y, total_width / 2)

        # Выводим коды букв
        self.result_text.insert(tk.END, "\nПолученные коды символов:\n")

        def get_codes(node, code="", codes=None):
            if codes is None:
                codes = []
            if node['left'] is None and node['right'] is None:
                codes.append((node['value'], code))
                return codes
            if node['left']:
                get_codes(node['left'], code + "1", codes)
            if node['right']:
                get_codes(node['right'], code + "0", codes)
            return codes

        codes = get_codes(tree)
        
        # Сопоставляем коды с исходными вероятностями в порядке их ввода
        prob_codes = []
        for i, prob in enumerate(original_probs):
            for value, code in codes:
                if abs(value - prob) < 0.0001:
                    prob_codes.append((i + 1, prob, code))
                    break
        
        # Выводим коды в порядке исходных символов
        for i, prob, code in sorted(prob_codes):
            self.result_text.insert(tk.END, f"z{i} ({prob:.2f}): {code}\n")

    def calculate_hemming(self):
        try:
            # Получаем вероятности
            probabilities = []
            for entry in self.prob_entries:
                value = entry.get()
                if ',' in value:
                    messagebox.showerror("Ошибка", "В качестве разделителя используйте символ '.' вместо ','")
                    return
                try:
                    prob = float(value)
                except ValueError:
                    messagebox.showerror("Ошибка",
                                         f"Значение '{value}' не является числом. В качестве разделителя используйте символ '.'")
                    return

                if prob <= 0 or prob > 1:
                    messagebox.showerror("Ошибка", "Вероятность должна быть в диапазоне (0, 1]")
                    return
                probabilities.append(prob)

            # Проверяем сумму вероятностей
            total_prob = sum(probabilities)
            if abs(total_prob - 1) > 0.0001:
                messagebox.showerror("Ошибка",
                                     f"Введенные вероятности не корректны - проверьте данные.\n"
                                     f"Сумма вероятностей должна быть равна 1, текущая сумма: {total_prob:.4f}")
                return

            # Очищаем текстовое поле
            self.result_text.delete(1.0, tk.END)

            # Сохраняем исходные вероятности до сортировки для вывода кодов
            original_probs = probabilities.copy()

            # Сортируем вероятности по убыванию
            probabilities.sort(reverse=True)

            # Выводим исходные данные
            self.result_text.insert(tk.END, "Шаг 1: Исходные вероятности (по убыванию):\n")
            for i, prob in enumerate(probabilities):
                self.result_text.insert(tk.END, f"z{i + 1}: {prob:.4f}\n")
            self.result_text.insert(tk.END, "\nПостроение дерева Хемминга:\n")

            # Список для хранения всех состояний вероятностей
            all_states = []
            # Список для хранения пар объединяемых вероятностей
            merged_pairs = []
            
            current_probs = probabilities.copy()
            step = 2

            while len(current_probs) > 1:
                # Сохраняем текущее состояние
                all_states.append(current_probs.copy())
                
                self.result_text.insert(tk.END, f"\nШаг {step}:\n")
                self.result_text.insert(tk.END, 
                    f"1. Текущие вероятности: {', '.join([f'{p:.4f}' for p in current_probs])}\n")

                # Берем две наименьшие вероятности
                min1, min2 = current_probs[-2:]
                merged_sum = min1 + min2
                
                # Сохраняем пару для построения дерева
                merged_pairs.append((min1, min2, merged_sum))

                self.result_text.insert(tk.END,
                    f"2. Объединяем две наименьшие вероятности: {min1:.4f} + {min2:.4f}\n"
                    f"3. Получаем вспомогательную вероятность: {merged_sum:.4f}\n")

                # Обновляем список вероятностей
                new_probs = current_probs[:-2] + [merged_sum]
                new_probs.sort(reverse=True)
                
                self.result_text.insert(tk.END,
                    f"4. Сортируем вероятности по убыванию\n"
                    f"5. Новый список вероятностей: {', '.join([f'{p:.4f}' for p in new_probs])}\n"
                    f"{'=' * 50}\n")

                current_probs = new_probs
                step += 1

            # Добавляем последнее состояние (1.0)
            all_states.append(current_probs.copy())

            # Строим дерево на основе сохраненных состояний и пар объединения
            self.draw_tree(original_probs, all_states, merged_pairs)

        except ValueError as e:
            messagebox.showerror("Ошибка", str(e))
        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {str(e)}")


if __name__ == "__main__":
    root = tk.Tk()
    app = HemmingCode(root)
    root.mainloop()
